Introduction
============

There are two ways in which you can compile MClone, i.e., the software has two
main rules and each compiling way has its funcionalities.

The first way in which you can compile MClone (and this is the default way -- if
you don't specify anything the Makefile will compile it this way) is in the
"Simulation" mode. In this mode, MClone will run its algorithm (it needs some
files -- take a look at "ConfiguringMClone.txt" -- with some ammount of
configuration so it run) without any GUI, and, then, without any of the GUI
funcionalities. The program compiled in this way is used so the user can, for
example, create a script that calls MClone several times and leave it running at
night or while doing other things.

The second way in which the user would like to compile MClone is in the "Viewer"
mode. In this mode, MClone will not be capable of simulating the algorithm
entirely (calm down... we are working on it :-)), but, once the algorithm was
runned (using the MClone Simulation mode), the user can see its result using the
Viewer mode without any problems. The Viewer mode was made using GLUT (we are
very likely to change it to GLUI or any other better library on a near future --
we'd be very glad to accept patches from other users :-)) and, then, you can
right click on the screen while using the program to know what kind of
funcionalities you have access to.

Finally, if you have some doubt about how to make the program using Eclipse
(Eclipse is the program we use to develop the program. So, we are likely to have
already passed for enough problems and are likely, then, to know some issues we
forgot to write here), write me an e-mail (it is on the end of the text)
and I can try to help you with it.

	### VERY IMPORTANT WARNING ###

	Before going straight to Eclipse, be sure to at least take a look at the
	file "WhatLibs.txt", which describes what are the libraries needed for
	building MClone, as well as explain how to make them work the way we
	want them to.

	### VERY IMPORTANT WARNING ###

So, now, open your Eclipse CDT[1], create a project with the folder where you've
put MClone (it can be an empty project, for example), right click on the name of
the project (on "Project Explorer", at the left of the screen), and click on
Properties. Go on C/C++ Build (at the left side of the screen) and click on
"Manage Configuration...", at the top right of the windows. Create two new
Configurations, which I'm going to call "MCloneSimulation" and "MCloneViewer"
(or, sometimes, for brevity, Simulation and Viewer, respectively).

Now, expand the submenus below the C/C++ Build and click in Settings. There is
where the magic is going to happen. You're ready to start configuring your
system to build the program using Eclipse.


Preparing the Simulation Mode to make on Eclipse
===============================================

The first thing to do is to include (on "Includes" options) the path for the
ImageMagick library. If you're on a linux distribution and followed my
instructions in "WhatLibs.txt", it should be at

"/usr/local/include/ImageMagick"

You'll also need to add the /src/ directory as a "Include" path, since many
files include each other taking as "reference" the /src/ directory. In Eclipse,
it would seem something like this:

"${workspace_loc:/${ProjName}/src}"

Now the program will compile, but the console will print a lot of undefined
references to many symbols, declared but not defined. You shall, then, tell to
the linker that it might link some libraries (including ImageMagick) so the
references can be defined. To do so, go to "GCC C++ Linker->Libraries" and add
the following "-l" diretives:

Magick++   <-- this is related to the ImageMagick library
m          <-- this is the math library of C (that one in #include <math.h>)
GLU        <-- GLU library (it links libGL along with it)
glut       <-- glut library
voronoi    <-- this is the library released with the project on the /lib/ folder

Finally, if you don't tell the linker to look at the /lib/ folder for the
Voronoi3D lib, it will not find it at all. So, be sure to add its path on the
"-L" library search path diretives.

For any reason, Eclipse tries to build again the Voronoi3D library when you
click on the "Build" button. This, for any mystic reason, causes an error on the
"stack.cc" file, which is trying to include a file called "memRoutines.h". Since
you have already compiled the library and already have the libvoronoi.a file
(take a look at the WhatLibs.txt to know what I'm talking about), and since you
also have a .tar.gz file with all the source code of the Voronoi3D library, you
can (and, actually, ou should, to economize you space and also to stop Eclipse
from trying to compile everything again) delete the source code files and leave
only the "libvoronoi.a" file on the same folder pointed by the "-L" directive
you've defined on the last paragraph.

After all of this, you should be able to compile and link the program without
problems.


Preparing the Viewer Mode to make on Eclipse
===========================================

Now that you've already passed by the most difficult part (building the program
on Simulation Mode), you should have no problems in building it in Viewer Mode.
To do so, take the exact same steps of the Simulation Mode and, after all, add,
in "GCC C++ Compiler->Preprocessor", the following -D directive:

GRAPHICS

Close the Properties of the project, click on the "Build" button, and you should
be able to compile it smoothly (at least I did :-).



Other Options
=============

VERBOSE
-------

If you're debugging the program, you can use the "-DVERBOSE" option, so the
program will print some usefull information during its running. To do so, click
in the "Preprocessor" options and the "VERBOSE" symbol.


CHANGING THE PROGRAM NAME
-------------------------

By default, Eclipse put the name of the Project as the "artifact" name (artifact
is the way Eclipse calls the name of the executable file). If you want to change
it (for example, call the Viewer Mode artifact something like "McloneViewer",
you could click on the "Build Artifact" tab, on the middle of the upper corner
of the Properties dialog, and change the field "Artifact name".


Footnotes
=========

[1]: The Eclipse CDT project is a project that enables you to use the Eclipse
     IDE as a C/C++ IDE. More information in:
     http://www.eclipse.org/cdt/

Authors
=======

John Gamboa (vaulttech@gmail.com)
